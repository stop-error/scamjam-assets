# This is a basic workflow to help you get started with Actions

name: update-dnsblocklists

# Controls when the workflow will run
on:
  schedule:
    - cron: '0 15 * * *'
  push:
    branches:
      - main
    paths:
      - "threats/dns/**"
      - "config/blocklists-optimizer/**"
  workflow_dispatch:

  
jobs:
  update-scamjam-blocklists:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4        

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tqdm

      - name: Clone Optimizer repository
        run: |
          git clone https://github.com/zachlagden/Pi-hole-Blocklist-Optimizer.git optimizer

      - name: Run Optimizer
        run: |
          cp config/prod/blocklists-optimizer/blocklists.conf optimizer/
          cd optimizer
          echo "Starting Pi-hole Blocklist Optimizer..."
          python pihole_downloader.py --prod-dir upload

          # Check if the optimizer produced the expected files
          if [ ! -f "upload/all_domains.txt" ]; then
            echo "Error: Optimizer did not produce all_domains.txt file"
            exit 1
          fi
          echo "Optimizer completed successfully"

          wget https://raw.githubusercontent.com/hagezi/dns-blocklists/main/adblock/spam-tlds-adblock-aggressive.txt -O optimizer/upload/scamjam-tld.txt
          wget https://raw.githubusercontent.com/hagezi/dns-blocklists/main/adblock/spam-tlds-adblock-allow.txt -O optimizer/upload/scamjam-tld-allow.txt
          

      - uses: ryand56/r2-upload-action@latest
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: optimizer/upload
          destination-dir: threats/dns/ # Can be anything as long as it is an actual path
          output-file-url: true # defaults to true
          multipart-size: 100 # If the file size is greater than the value provided here, then use multipart upload
          max-retries: 5 # The maximum number of retries it takes to upload a multipart chunk until it moves on to the next part
          multipart-concurrent: true # Whether to concurrently upload a multipart chunk
          keep-file-fresh: true # defaults to false
